local Library = {}
Library.__index = Library

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Constants
local BACKGROUND_COLOR = Color3.fromRGB(15, 15, 17)
local TOPBAR_COLOR = Color3.fromRGB(20, 20, 22)
local TEXT_COLOR = Color3.fromRGB(200, 200, 200)
local ACCENT_COLOR = Color3.fromRGB(72, 255, 84)
local HOVER_COLOR = Color3.fromRGB(30, 30, 32)

-- Animation Settings
local TWEEN_INFO = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
local SPRING_INFO = {
    dampingRatio = 0.75,
    frequency = 6
}

function Library.new(title)
    local GUI = {
        Toggled = true,
        Dragging = false,
        DragStart = nil,
        StartPosition = nil,
        ActiveTab = nil
    }
    setmetatable(GUI, Library)
    
    -- Create ScreenGui
    local MainGui = Instance.new("ScreenGui")
    MainGui.Name = "ModernUI"
    MainGui.Parent = CoreGui
    GUI.MainGui = MainGui
    
    -- Main Container
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 800, 0, 500)
    MainFrame.Position = UDim2.new(0.5, -400, 0.5, -250)
    MainFrame.BackgroundColor3 = BACKGROUND_COLOR
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = MainGui
    GUI.MainFrame = MainFrame
    
    -- Add corner radius
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = MainFrame
    
    -- Top Bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 60)
    TopBar.BackgroundColor3 = TOPBAR_COLOR
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame
    
    -- Top bar corner radius
    local TopCorner = Instance.new("UICorner")
    TopCorner.CornerRadius = UDim.new(0, 8)
    TopCorner.Parent = TopBar
    
    -- Tab Container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(1, 0, 0, 60)
    TabContainer.BackgroundTransparency = 1
    TabContainer.Parent = TopBar
    
    -- Tab List Layout
    local TabList = Instance.new("UIListLayout")
    TabList.FillDirection = Enum.FillDirection.Horizontal
    TabList.HorizontalAlignment = Enum.HorizontalAlignment.Left
    TabList.SortOrder = Enum.SortOrder.LayoutOrder
    TabList.Padding = UDim.new(0, 10)
    TabList.Parent = TabContainer
    
    -- Tab Padding
    local TabPadding = Instance.new("UIPadding")
    TabPadding.PaddingLeft = UDim.new(0, 10)
    TabPadding.Parent = TabContainer
    
    -- Content Container
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Size = UDim2.new(1, -40, 1, -80)
    ContentContainer.Position = UDim2.new(0, 20, 0, 70)
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Parent = MainFrame
    GUI.ContentContainer = ContentContainer
    
    -- Animate window on creation
    MainFrame.Size = UDim2.new(0, 0, 0, 0)
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    TweenService:Create(MainFrame, TWEEN_INFO, {
        Size = UDim2.new(0, 800, 0, 500),
        Position = UDim2.new(0.5, -400, 0.5, -250)
    }):Play()
    
    -- Toggle function with animation
    function GUI:Toggle()
        self.Toggled = not self.Toggled
        
        if self.Toggled then
            MainFrame.Visible = true
            TweenService:Create(MainFrame, TWEEN_INFO, {
                Size = UDim2.new(0, 800, 0, 500),
                Position = UDim2.new(0.5, -400, 0.5, -250)
            }):Play()
        else
            local tween = TweenService:Create(MainFrame, TWEEN_INFO, {
                Size = UDim2.new(0, 0, 0, 0),
                Position = UDim2.new(0.5, 0, 0.5, 0)
            })
            tween.Completed:Connect(function()
                if not self.Toggled then
                    MainFrame.Visible = false
                end
            end)
            tween:Play()
        end
    end
    
    -- Make window draggable
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            GUI.Dragging = true
            GUI.DragStart = input.Position
            GUI.StartPosition = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    GUI.Dragging = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if GUI.Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - GUI.DragStart
            TweenService:Create(MainFrame, TweenInfo.new(0.1), {
                Position = UDim2.new(
                    GUI.StartPosition.X.Scale,
                    GUI.StartPosition.X.Offset + delta.X,
                    GUI.StartPosition.Y.Scale,
                    GUI.StartPosition.Y.Offset + delta.Y
                )
            }):Play()
        end
    end)
    
    function GUI:CreateTab(name, icon)
        local tab = {Elements = {}}
        
        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = name.."Tab"
        TabButton.Size = UDim2.new(0, 100, 1, 0)
        TabButton.BackgroundTransparency = 1
        TabButton.Text = ""
        TabButton.Parent = TabContainer
        
        -- Icon
        local Icon = Instance.new("ImageLabel")
        Icon.Size = UDim2.new(0, 20, 0, 20)
        Icon.Position = UDim2.new(0.5, -10, 0, 10)
        Icon.BackgroundTransparency = 1
        Icon.Image = icon
        Icon.ImageColor3 = TEXT_COLOR
        Icon.Parent = TabButton
        
        -- Tab Text
        local TabText = Instance.new("TextLabel")
        TabText.Size = UDim2.new(1, 0, 0, 20)
        TabText.Position = UDim2.new(0, 0, 0, 35)
        TabText.BackgroundTransparency = 1
        TabText.Text = name
        TabText.TextColor3 = TEXT_COLOR
        TabText.TextSize = 12
        TabText.Font = Enum.Font.Code
        TabText.Parent = TabButton
        
        -- Selection Indicator
        local SelectionIndicator = Instance.new("Frame")
        SelectionIndicator.Name = "SelectionIndicator"
        SelectionIndicator.Size = UDim2.new(0, 0, 0, 2)
        SelectionIndicator.Position = UDim2.new(0.5, 0, 1, -2)
        SelectionIndicator.AnchorPoint = Vector2.new(0.5, 0)
        SelectionIndicator.BackgroundColor3 = ACCENT_COLOR
        SelectionIndicator.BorderSizePixel = 0
        SelectionIndicator.Parent = TabButton
        
        -- Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = name.."Content"
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.ScrollBarThickness = 2
        TabContent.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
        TabContent.ScrollBarImageTransparency = 0.5
        TabContent.Visible = false
        TabContent.Parent = ContentContainer
        
        -- Content Layout
        local ContentList = Instance.new("UIListLayout")
        ContentList.SortOrder = Enum.SortOrder.LayoutOrder
        ContentList.Padding = UDim.new(0, 10)
        ContentList.Parent = TabContent
        
        -- Content Padding
        local ContentPadding = Instance.new("UIPadding")
        ContentPadding.PaddingTop = UDim.new(0, 10)
        ContentPadding.PaddingLeft = UDim.new(0, 10)
        ContentPadding.PaddingRight = UDim.new(0, 10)
        ContentPadding.Parent = TabContent
        
        TabButton.MouseButton1Click:Connect(function()
            if GUI.ActiveTab then
                -- Fade out old tab
                TweenService:Create(GUI.ActiveTab.SelectionIndicator, TWEEN_INFO, {
                    Size = UDim2.new(0, 0, 0, 2)
                }):Play()
                GUI.ActiveTab.Content.Visible = false
                GUI.ActiveTab.Icon.ImageColor3 = TEXT_COLOR
                GUI.ActiveTab.TabText.TextColor3 = TEXT_COLOR
            end
            
            -- Fade in new tab
            TweenService:Create(SelectionIndicator, TWEEN_INFO, {
                Size = UDim2.new(0.8, 0, 0, 2)
            }):Play()
            TabContent.Visible = true
            TweenService:Create(Icon, TWEEN_INFO, {
                ImageColor3 = ACCENT_COLOR
            }):Play()
            TweenService:Create(TabText, TWEEN_INFO, {
                TextColor3 = ACCENT_COLOR
            }):Play()
            
            GUI.ActiveTab = {
                Content = TabContent,
                SelectionIndicator = SelectionIndicator,
                Icon = Icon,
                TabText = TabText
            }
        end)
        
        -- If this is the first tab, select it
        if not GUI.ActiveTab then
            TabContent.Visible = true
            SelectionIndicator.Size = UDim2.new(0.8, 0, 0, 2)
            Icon.ImageColor3 = ACCENT_COLOR
            TabText.TextColor3 = ACCENT_COLOR
            GUI.ActiveTab = {
                Content = TabContent,
                SelectionIndicator = SelectionIndicator,
                Icon = Icon,
                TabText = TabText
            }
        end
        
        function tab:CreateToggle(name, default, callback)
            local toggle = {Value = default or false}
            
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = name.."Toggle"
            ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
            ToggleFrame.BackgroundTransparency = 1
            ToggleFrame.Parent = TabContent
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Size = UDim2.new(0, 20, 0, 20)
            ToggleButton.Position = UDim2.new(0, 0, 0.5, -10)
            ToggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Text = ""
            ToggleButton.AutoButtonColor = false
            ToggleButton.Parent = ToggleFrame
            
            local ToggleCorner = Instance.new("UICorner")
            ToggleCorner.CornerRadius = UDim.new(0, 4)
            ToggleCorner.Parent = ToggleButton
            
            local Checkmark = Instance.new("ImageLabel")
            Checkmark.Size = UDim2.new(0.8, 0, 0.8, 0)
            Checkmark.Position = UDim2.new(0.1, 0, 0.1, 0)
            Checkmark.BackgroundTransparency = 1
            Checkmark.Image = "rbxassetid://7072706620"
            Checkmark.ImageColor3 = Color3.fromRGB(255, 255, 255)
            Checkmark.ImageTransparency = 1
            Checkmark.Parent = ToggleButton
            
            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Size = UDim2.new(1, -30, 1, 0)
            ToggleLabel.Position = UDim2.new(0, 30, 0, 0)
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Text = name
            ToggleLabel.TextColor3 = TEXT_COLOR
            ToggleLabel.TextSize = 14
            ToggleLabel.Font = Enum.Font.Code
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            ToggleLabel.Parent = ToggleFrame
            
            local function updateToggle()
                TweenService:Create(ToggleButton, TWEEN_INFO, {
                    BackgroundColor3 = toggle.Value and ACCENT_COLOR or Color3.fromRGB(40, 40, 40)
                }):Play()
                
                TweenService:Create(Checkmark, TWEEN_INFO, {
                    ImageTransparency = toggle.Value and 0 or 1
                }):Play()
                
                if callback then
                    callback(toggle.Value)
                end
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggle.Value = not toggle.Value
                updateToggle()
            end)
            
            -- Hover effect
            ToggleButton.MouseEnter:Connect(function()
                if not toggle.Value then
                    TweenService:Create(ToggleButton, TWEEN_INFO, {
                        BackgroundColor3 = HOVER_COLOR
                    }):Play()
                end
            end)
            
            ToggleButton.MouseLeave:Connect(function()
                if not toggle.Value then
                    TweenService:Create(ToggleButton, TWEEN_INFO, {
                        BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    }):Play()
                end
            end)
            
            if default then
                updateToggle()
            end
            
            return toggle
        end
        
        function tab:CreateSlider(name, min, max, default, callback)
            local slider = {Value = default or min}
            
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = name.."Slider"
            SliderFrame.Size = UDim2.new(1, 0, 0, 50)
            SliderFrame.BackgroundTransparency = 1
            SliderFrame.Parent = TabContent
            
            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Size = UDim2.new(1, -50, 0, 20)
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.Text = name
            SliderLabel.TextColor3 = TEXT_COLOR
            SliderLabel.TextSize = 14
            SliderLabel.Font = Enum.Font.Code
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            SliderLabel.Parent = SliderFrame
            
            local SliderValue = Instance.new("TextBox")
            SliderValue.Size = UDim2.new(0, 40, 0, 20)
            SliderValue.Position = UDim2.new(1, -40, 0, 0)
            SliderValue.BackgroundTransparency = 1
            SliderValue.Text = tostring(slider.Value)
            SliderValue.TextColor3 = TEXT_COLOR
            SliderValue.TextSize = 14
            SliderValue.Font = Enum.Font.Code
            SliderValue.Parent = SliderFrame
            
            local SliderBackground = Instance.new("Frame")
            SliderBackground.Name = "Background"
            SliderBackground.Size = UDim2.new(1, 0, 0, 4)
            SliderBackground.Position = UDim2.new(0, 0, 0, 35)
            SliderBackground.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SliderBackground.BorderSizePixel = 0
            SliderBackground.Parent = SliderFrame
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Size = UDim2.new(0, 0, 1, 0)
            SliderFill.BackgroundColor3 = ACCENT_COLOR
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderBackground
            
            local SliderCorner = Instance.new("UICorner")
            SliderCorner.CornerRadius = UDim.new(1, 0)
            SliderCorner.Parent = SliderBackground
            
            local FillCorner = Instance.new("UICorner")
            FillCorner.CornerRadius = UDim.new(1, 0)
            FillCorner.Parent = SliderFill
            
            local function updateSlider(value)
                value = math.clamp(value, min, max)
                slider.Value = value
                SliderValue.Text = tostring(value)
                
                local percent = (value - min) / (max - min)
                TweenService:Create(SliderFill, TWEEN_INFO, {
                    Size = UDim2.new(percent, 0, 1, 0)
                }):Play()
                
                if callback then
                    callback(value)
                end
            end
            
            SliderBackground.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local percent = math.clamp((input.Position.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1)
                    updateSlider(min + (max - min) * percent)
                    
                    local connection
                    connection = RunService.RenderStepped:Connect(function()
                        if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                            local percent = math.clamp((UserInputService:GetMouseLocation().X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1)
                            updateSlider(min + (max - min) * percent)
                        else
                            connection:Disconnect()
                        end
                    end)
                end
            end)
            
            SliderValue.FocusLost:Connect(function()
                local num = tonumber(SliderValue.Text)
                if num then
                    updateSlider(num)
                else
                    SliderValue.Text = tostring(slider.Value)
                end
            end)
            
            updateSlider(default or min)
            
            return slider
        end
        
        function tab:CreateButton(name, callback)
            local ButtonFrame = Instance.new("Frame")
            ButtonFrame.Name = name.."Button"
            ButtonFrame.Size = UDim2.new(1, 0, 0, 35)
            ButtonFrame.BackgroundTransparency = 1
            ButtonFrame.Parent = TabContent
            
            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, 0, 1, 0)
            Button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            Button.BorderSizePixel = 0
            Button.Text = name
            Button.TextColor3 = TEXT_COLOR
            Button.TextSize = 14
            Button.Font = Enum.Font.Code
            Button.AutoButtonColor = false
            Button.Parent = ButtonFrame
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 4)
            ButtonCorner.Parent = Button
            
            Button.MouseButton1Click:Connect(function()
                if callback then
                    callback()
                end
                
                -- Click animation
                TweenService:Create(Button, TweenInfo.new(0.1), {
                    BackgroundColor3 = ACCENT_COLOR
                }):Play()
                
                wait(0.1)
                
                TweenService:Create(Button, TWEEN_INFO, {
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                }):Play()
            end)
            
            -- Hover effect
            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, TWEEN_INFO, {
                    BackgroundColor3 = HOVER_COLOR
                }):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, TWEEN_INFO, {
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                }):Play()
            end)
        end
        
        -- Add other UI elements (ColorPicker, etc.) here...
        
        return tab
    end
    
    return GUI
end

return Library
